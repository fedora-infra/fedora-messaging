#!/usr/bin/env python3

import os
import tempfile
import sys
import venv
import site
from subprocess import run
from collections import defaultdict
from dataclasses import dataclass
from textwrap import wrap


SCHEMAS_FILE = "schema-packages.txt"
DOC_FILE = "schemas.rst"
HEADER = """
=================
Available Schemas
=================

.. This file is autogenerated by the build-schemas-list.py script. Do not edit manually.

These are the topics that you can expect to see on Fedora's message bus,
sorted by the python package that contains their schema.
Install the corresponding python package if you want to make use of the schema
and access additional information on the message you're receiving.
"""


def read_packages(schemas_filepath):
    packages = []
    with open(schemas_filepath, "r") as schemas_file:
        for line in schemas_file:
            line = line.strip()
            if not line or line.startswith("#"):
                continue
            packages.append(line)
    packages.sort()
    return packages


@dataclass
class Schema:
    topic: str
    package: str
    doc: str


def create_venv(dirname):
    venv.create(dirname, with_pip=True)
    # Activate venv
    sys.prefix = sys.exec_prefix = dirname
    site.addsitepackages(None, [dirname])


def install_packages(dirname, packages):
    # Don't use pip as a library:
    # https://pip.pypa.io/en/stable/user_guide/#using-pip-from-your-program
    pip = os.path.join(dirname, "bin", "pip")
    for package in packages:
        run([pip, "install", package], check=True)


def get_schemas():
    import pkg_resources

    schemas = defaultdict(list)
    for entry_point in pkg_resources.iter_entry_points("fedora.messages"):
        msg_cls = entry_point.load()
        if not msg_cls.topic:
            continue
        package_name = entry_point.dist.project_name
        doc = " ".join(wrap(msg_cls.__doc__)) if msg_cls.__doc__ else None
        schemas[package_name].append(
            Schema(topic=msg_cls.topic, package=package_name, doc=doc)
        )
    return schemas


def write_doc(schemas, doc_filepath):
    with open(doc_filepath, "w") as doc_file:
        doc_file.write(HEADER)
        for package_name in sorted(schemas):
            package_schemas = schemas[package_name]
            print(f"\n\n{package_name}", file=doc_file)
            print("=" * len(package_name), end="\n\n", file=doc_file)
            for schema in package_schemas:
                if schema.doc:
                    print(f"* ``{schema.topic}``: {schema.doc.strip()}", file=doc_file)
                else:
                    print(f"* ``{schema.topic}``", file=doc_file)


def main():
    packages = read_packages(SCHEMAS_FILE)
    with tempfile.TemporaryDirectory() as tmpdirname:
        create_venv(tmpdirname)
        install_packages(tmpdirname, packages)
        schemas = get_schemas()
        write_doc(schemas, DOC_FILE)
        print(f"Wrote the documentation in {DOC_FILE}")


if __name__ == "__main__":
    main()
